# Reference Commands for `kubelet` portion of presentation

# Validate docker
docker --version
sudo docker run hello-world

# Run kubelet from manifests directory
sudo ./kubelet --pod-manifest-path=$PWD/manifests

# Look at the pods - none running yet
sudo docker ps

# Copy nginx definition into manifests/
cp $PWD/nginx.yaml $PWD/manifests/nginx.yaml

# Inspect the containers with the following using their hash at the end
# See how they are configured related to each other
sudo docker inspect --format '{{ .NetworkSettings.IPAddress  }}' <hash>

# See how they are networked
sudo docker inspect --format '{{ .HostConfig.NetworkMode  }}' <hash>

# Confirm nginx is responding
curl http://172.17.0.2

# Confirm log truncator is working
sudo docker exec -t <hash> cat /logdir/access.log

# Inspect the health endpoint
curl http://localhost:10255/healthz

# Get status of pods
curl http://localhost:10255/pods | jq .

# Get info about machine kubelet is running on
curl http://localhost:10255/spec/ | jq .

# Remove the manifest
rm $PWD/manifests/nginx.yaml

# Starting etcd
sudo docker run --volume=$PWD/etcd-data:/default.etcd \
--detach --net=host quay.io/coreos/etcd > etcd-container-id

# Starting kube-apiserver with etcd
sudo ./kube-apiserver \
--etcd-servers=http://127.0.0.1:2379 \
--service-cluster-ip-range=10.0.0.0/16

# Check API for nodes
curl http://localhost:8080/api/v1/nodes

# Check API for pods
curl http://localhost:8080/api/v1/pods

# Start kubelet pointing to API specified in kubeconfig
sudo ./kubelet --kubeconfig=$PWD/kubeconfig

# Convert the YAML to JSON for use with API
ruby -ryaml -rjson \
-e 'puts JSON.pretty_generate(YAML.load(ARGF))' < nginx.yaml > nginx.json

# POST the nginx pod definition to the API
curl \
--header "Content-Type: application/json" \
--request POST http://localhost:8080/api/v1/namespaces/default/pods \
--data @nginx.json | jq 'del(.spec.containers, .spec.volumes)'

# Look in the default namespace for pods
curl http://localhost:8080/api/v1/namespaces/default/pods

# Cleaner view with jq
curl http://localhost:8080/api/v1/namespaces/default/pods | \
> jq '.items[] | { name: .metadata.name, status: .status } | del(.status.containerStatuses)'

# Remove the pod via API
curl --request DELETE http://localhost:8080/api/v1/namespaces/default/pods/nginx

# Scale deployments
./kubectl scale --replicas=1 -f nginx-deployment.yaml

